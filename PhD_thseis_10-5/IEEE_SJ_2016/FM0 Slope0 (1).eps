%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: FM0 Slope0 (1).pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: elsaid
%%CreationDate: 02.10.2015, 12:02:47
%%BoundingBox: 0 0 576 431
%%HiResBoundingBox: 0 0 576 430.2001
%%CropBox: 0 0 576 430.2001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 565 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2015-08-31T16:58:49+02:00"
   xmp:CreatorTool="matplotlib 1.4.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -430.2 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 430.2 li
576 430.2 li
576 0 li
cp
clp
gsave
0 430.2 mo
576 430.2 li
576 -.799988 li
0 -.799988 li
cp
clp
0 430.2 mo
576 430.2 li
576 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
72 387.18 mo
80.928 387.18 li
72 387.18 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
72 387.18 mo
80.928 387.18 li
72 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
80.928 387.18 mo
89.856 387.18 li
80.928 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
80.928 387.18 mo
89.856 387.18 li
80.928 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
89.856 387.18 mo
98.784 387.18 li
89.856 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
89.856 387.18 mo
98.784 387.18 li
89.856 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
98.784 387.18 mo
107.712 387.18 li
98.784 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
98.784 387.18 mo
107.712 387.18 li
98.784 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
107.712 387.18 mo
116.64 387.18 li
107.712 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
107.712 387.18 mo
116.64 387.18 li
107.712 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
116.64 387.18 mo
125.568 387.18 li
116.64 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
116.64 387.18 mo
125.568 387.18 li
116.64 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
125.568 387.18 mo
134.496 387.18 li
125.568 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
125.568 387.18 mo
134.496 387.18 li
125.568 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
134.496 387.18 mo
143.424 387.18 li
134.496 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
134.496 387.18 mo
143.424 387.18 li
134.496 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
143.424 387.18 mo
152.352 387.18 li
143.424 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
143.424 387.18 mo
152.352 387.18 li
143.424 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
152.352 387.18 mo
161.28 387.18 li
152.352 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
152.352 387.18 mo
161.28 387.18 li
152.352 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
161.28 387.18 mo
170.208 387.18 li
161.28 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
161.28 387.18 mo
170.208 387.18 li
161.28 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
170.208 387.18 mo
179.136 387.18 li
179.136 368.06 li
170.208 368.06 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
170.208 387.18 mo
179.136 387.18 li
179.136 368.06 li
170.208 368.06 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
179.136 387.18 mo
188.064 387.18 li
188.064 368.06 li
179.136 368.06 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
179.136 387.18 mo
188.064 387.18 li
188.064 368.06 li
179.136 368.06 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
188.064 387.18 mo
196.992 387.18 li
196.992 329.82 li
188.064 329.82 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
188.064 387.18 mo
196.992 387.18 li
196.992 329.82 li
188.064 329.82 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
196.992 387.18 mo
205.92 387.18 li
205.92 368.06 li
196.992 368.06 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
196.992 387.18 mo
205.92 387.18 li
205.92 368.06 li
196.992 368.06 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
205.92 387.18 mo
214.848 387.18 li
214.848 234.22 li
205.92 234.22 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
205.92 387.18 mo
214.848 387.18 li
214.848 234.22 li
205.92 234.22 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
214.848 387.18 mo
223.776 387.18 li
223.776 195.98 li
214.848 195.98 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
214.848 387.18 mo
223.776 387.18 li
223.776 195.98 li
214.848 195.98 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
223.776 387.18 mo
232.704 387.18 li
232.704 138.62 li
223.776 138.62 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
223.776 387.18 mo
232.704 387.18 li
232.704 138.62 li
223.776 138.62 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
232.704 387.18 mo
241.632 387.18 li
241.632 43.02 li
232.704 43.02 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
232.704 387.18 mo
241.632 387.18 li
241.632 43.02 li
232.704 43.02 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
241.632 387.18 mo
250.56 387.18 li
250.56 119.5 li
241.632 119.5 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
241.632 387.18 mo
250.56 387.18 li
250.56 119.5 li
241.632 119.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
250.56 387.18 mo
259.488 387.18 li
259.488 195.98 li
250.56 195.98 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
250.56 387.18 mo
259.488 387.18 li
259.488 195.98 li
250.56 195.98 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
259.488 387.18 mo
268.416 387.18 li
268.416 195.98 li
259.488 195.98 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
259.488 387.18 mo
268.416 387.18 li
268.416 195.98 li
259.488 195.98 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
268.416 387.18 mo
277.344 387.18 li
277.344 176.86 li
268.416 176.86 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
268.416 387.18 mo
277.344 387.18 li
277.344 176.86 li
268.416 176.86 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
277.344 387.18 mo
286.272 387.18 li
286.272 119.5 li
277.344 119.5 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
277.344 387.18 mo
286.272 387.18 li
286.272 119.5 li
277.344 119.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
286.272 387.18 mo
295.2 387.18 li
295.2 100.38 li
286.272 100.38 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
286.272 387.18 mo
295.2 387.18 li
295.2 100.38 li
286.272 100.38 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
295.2 387.18 mo
304.128 387.18 li
304.128 215.1 li
295.2 215.1 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
295.2 387.18 mo
304.128 387.18 li
304.128 215.1 li
295.2 215.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
304.128 387.18 mo
313.056 387.18 li
313.056 291.58 li
304.128 291.58 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
304.128 387.18 mo
313.056 387.18 li
313.056 291.58 li
304.128 291.58 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
313.056 387.18 mo
321.984 387.18 li
321.984 195.98 li
313.056 195.98 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
313.056 387.18 mo
321.984 387.18 li
321.984 195.98 li
313.056 195.98 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
321.984 387.18 mo
330.912 387.18 li
330.912 234.22 li
321.984 234.22 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
321.984 387.18 mo
330.912 387.18 li
330.912 234.22 li
321.984 234.22 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
330.912 387.18 mo
339.84 387.18 li
339.84 234.22 li
330.912 234.22 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
330.912 387.18 mo
339.84 387.18 li
339.84 234.22 li
330.912 234.22 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
339.84 387.18 mo
348.768 387.18 li
348.768 272.46 li
339.84 272.46 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
339.84 387.18 mo
348.768 387.18 li
348.768 272.46 li
339.84 272.46 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
348.768 387.18 mo
357.696 387.18 li
357.696 138.62 li
348.768 138.62 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
348.768 387.18 mo
357.696 387.18 li
357.696 138.62 li
348.768 138.62 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
357.696 387.18 mo
366.624 387.18 li
366.624 138.62 li
357.696 138.62 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
357.696 387.18 mo
366.624 387.18 li
366.624 138.62 li
357.696 138.62 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
366.624 387.18 mo
375.552 387.18 li
375.552 291.58 li
366.624 291.58 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
366.624 387.18 mo
375.552 387.18 li
375.552 291.58 li
366.624 291.58 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
375.552 387.18 mo
384.48 387.18 li
384.48 348.94 li
375.552 348.94 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
375.552 387.18 mo
384.48 387.18 li
384.48 348.94 li
375.552 348.94 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
384.48 387.18 mo
393.408 387.18 li
384.48 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
384.48 387.18 mo
393.408 387.18 li
384.48 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
393.408 387.18 mo
402.336 387.18 li
402.336 368.06 li
393.408 368.06 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
393.408 387.18 mo
402.336 387.18 li
402.336 368.06 li
393.408 368.06 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
402.336 387.18 mo
411.264 387.18 li
411.264 368.06 li
402.336 368.06 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
402.336 387.18 mo
411.264 387.18 li
411.264 368.06 li
402.336 368.06 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
411.264 387.18 mo
420.192 387.18 li
411.264 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
411.264 387.18 mo
420.192 387.18 li
411.264 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
420.192 387.18 mo
429.12 387.18 li
420.192 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
420.192 387.18 mo
429.12 387.18 li
420.192 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
429.12 387.18 mo
438.048 387.18 li
429.12 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
429.12 387.18 mo
438.048 387.18 li
429.12 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
438.048 387.18 mo
446.976 387.18 li
438.048 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
438.048 387.18 mo
446.976 387.18 li
438.048 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
446.976 387.18 mo
455.904 387.18 li
446.976 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
446.976 387.18 mo
455.904 387.18 li
446.976 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
455.904 387.18 mo
464.832 387.18 li
455.904 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
455.904 387.18 mo
464.832 387.18 li
455.904 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
464.832 387.18 mo
473.76 387.18 li
464.832 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
464.832 387.18 mo
473.76 387.18 li
464.832 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
473.76 387.18 mo
482.688 387.18 li
473.76 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
473.76 387.18 mo
482.688 387.18 li
473.76 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
482.688 387.18 mo
491.616 387.18 li
482.688 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
482.688 387.18 mo
491.616 387.18 li
482.688 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
491.616 387.18 mo
500.544 387.18 li
491.616 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
491.616 387.18 mo
500.544 387.18 li
491.616 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
500.544 387.18 mo
509.472 387.18 li
500.544 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
500.544 387.18 mo
509.472 387.18 li
500.544 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
509.472 387.18 mo
518.4 387.18 li
509.472 387.18 li
cp
.959258 .751583 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
509.472 387.18 mo
518.4 387.18 li
509.472 387.18 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
72 43.02 mo
518.4 43.02 li
1 /0 /CSD get_res sepcs
1 sep
@
518.4 387.18 mo
518.4 43.02 li
@
72 387.18 mo
518.4 387.18 li
@
72 387.18 mo
72 43.02 li
@
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
.5 lw
0 lc
1 lj
[1 3 ] 0 dsh
72 387.18 mo
72 43.02 li
@
grestore
72 387.18 mo
72 383.18 li
f
.5 lw
0 lc
1 lj
72 387.18 mo
72 383.18 li
@
72 43.02 mo
72 47.02 li
f
72 43.02 mo
72 47.02 li
@
51.6208 399.309 mo
53.5528 399.309 li
53.5528 392.637 li
51.4528 393.057 li
51.4528 391.977 li
53.5408 391.557 li
54.7288 391.557 li
54.7288 399.309 li
56.6608 399.309 li
56.6608 400.305 li
51.6208 400.305 li
51.6208 399.309 li
f
61.5808 396.153 mo
61.0168 396.153 60.5728 396.309 60.2488 396.609 cv
59.9248 396.909 59.7688 397.317 59.7688 397.845 cv
59.7688 398.373 59.9248 398.793 60.2488 399.093 cv
60.5728 399.393 61.0168 399.537 61.5808 399.537 cv
62.1328 399.537 62.5768 399.393 62.9008 399.081 cv
63.2248 398.781 63.3928 398.373 63.3928 397.845 cv
63.3928 397.317 63.2248 396.909 62.9128 396.609 cv
62.5888 396.309 62.1448 396.153 61.5808 396.153 cv
60.3928 395.649 mo
59.8888 395.529 59.4928 395.289 59.2048 394.941 cv
58.9168 394.593 58.7848 394.173 58.7848 393.669 cv
58.7848 392.973 59.0248 392.421 59.5288 392.013 cv
60.0208 391.605 60.7048 391.401 61.5808 391.401 cv
62.4448 391.401 63.1288 391.605 63.6328 392.013 cv
64.1248 392.421 64.3768 392.973 64.3768 393.669 cv
64.3768 394.173 64.2328 394.593 63.9448 394.941 cv
63.6568 395.289 63.2728 395.529 62.7688 395.649 cv
63.3328 395.781 63.7768 396.045 64.1008 396.429 cv
64.4128 396.813 64.5808 397.293 64.5808 397.845 cv
64.5808 398.697 64.3168 399.345 63.8008 399.789 cv
63.2728 400.245 62.5408 400.461 61.5808 400.461 cv
60.6088 400.461 59.8648 400.245 59.3488 399.789 cv
58.8328 399.345 58.5808 398.697 58.5808 397.845 cv
58.5808 397.293 58.7368 396.813 59.0608 396.429 cv
59.3728 396.045 59.8168 395.781 60.3928 395.649 cv
59.9608 393.777 mo
59.9608 394.233 60.0928 394.593 60.3808 394.845 cv
60.6688 395.097 61.0648 395.217 61.5808 395.217 cv
62.0848 395.217 62.4808 395.097 62.7688 394.845 cv
63.0568 394.593 63.2008 394.233 63.2008 393.777 cv
63.2008 393.321 63.0568 392.973 62.7688 392.721 cv
62.4808 392.469 62.0848 392.337 61.5808 392.337 cv
61.0648 392.337 60.6688 392.469 60.3808 392.721 cv
60.0928 392.973 59.9608 393.321 59.9608 393.777 cv
f
66.6928 391.557 mo
71.3369 391.557 li
71.3369 392.553 li
67.7729 392.553 li
67.7729 394.701 li
67.9408 394.641 68.1208 394.593 68.2888 394.569 cv
68.4568 394.545 68.6368 394.521 68.8048 394.521 cv
69.7768 394.521 70.5449 394.797 71.1208 395.325 cv
71.6969 395.865 71.9848 396.585 71.9848 397.497 cv
71.9848 398.445 71.6849 399.177 71.0968 399.693 cv
70.5089 400.209 69.6808 400.461 68.6248 400.461 cv
68.2529 400.461 67.8809 400.425 67.4968 400.377 cv
67.1129 400.317 66.7289 400.233 66.3209 400.101 cv
66.3209 398.913 li
66.6689 399.105 67.0289 399.249 67.4128 399.345 cv
67.7849 399.441 68.1808 399.477 68.6009 399.477 cv
69.2729 399.477 69.8129 399.309 70.2088 398.949 cv
70.5928 398.589 70.7969 398.109 70.7969 397.497 cv
70.7969 396.897 70.5928 396.417 70.2088 396.057 cv
69.8129 395.697 69.2729 395.517 68.6009 395.517 cv
68.2888 395.517 67.9649 395.553 67.6528 395.625 cv
67.3409 395.697 67.0169 395.805 66.6928 395.949 cv
66.6928 391.557 li
f
76.8449 392.337 mo
76.2329 392.337 75.7769 392.637 75.4649 393.237 cv
75.1529 393.837 75.0089 394.737 75.0089 395.937 cv
75.0089 397.137 75.1529 398.037 75.4649 398.637 cv
75.7769 399.237 76.2329 399.537 76.8449 399.537 cv
77.4569 399.537 77.9129 399.237 78.2249 398.637 cv
78.5249 398.037 78.6809 397.137 78.6809 395.937 cv
78.6809 394.737 78.5249 393.837 78.2249 393.237 cv
77.9129 392.637 77.4569 392.337 76.8449 392.337 cv
76.8449 391.401 mo
77.8169 391.401 78.5609 391.797 79.0889 392.565 cv
79.6049 393.345 79.8689 394.473 79.8689 395.937 cv
79.8689 397.413 79.6049 398.541 79.0889 399.309 cv
78.5609 400.077 77.8169 400.461 76.8449 400.461 cv
75.8609 400.461 75.1049 400.077 74.5889 399.309 cv
74.0729 398.541 73.8209 397.413 73.8209 395.937 cv
73.8209 394.473 74.0729 393.345 74.5889 392.565 cv
75.1049 391.797 75.8609 391.401 76.8449 391.401 cv
f
84.4769 392.337 mo
83.8649 392.337 83.4089 392.637 83.0969 393.237 cv
82.7849 393.837 82.6409 394.737 82.6409 395.937 cv
82.6409 397.137 82.7849 398.037 83.0969 398.637 cv
83.4089 399.237 83.8649 399.537 84.4769 399.537 cv
85.0889 399.537 85.5449 399.237 85.8569 398.637 cv
86.1569 398.037 86.3129 397.137 86.3129 395.937 cv
86.3129 394.737 86.1569 393.837 85.8569 393.237 cv
85.5449 392.637 85.0889 392.337 84.4769 392.337 cv
84.4769 391.401 mo
85.4489 391.401 86.1929 391.797 86.7209 392.565 cv
87.2369 393.345 87.5009 394.473 87.5009 395.937 cv
87.5009 397.413 87.2369 398.541 86.7209 399.309 cv
86.1929 400.077 85.4489 400.461 84.4769 400.461 cv
83.4929 400.461 82.7369 400.077 82.2209 399.309 cv
81.7049 398.541 81.4529 397.413 81.4529 395.937 cv
81.4529 394.473 81.7049 393.345 82.2209 392.565 cv
82.7369 391.797 83.4929 391.401 84.4769 391.401 cv
f
92.1089 392.337 mo
91.4969 392.337 91.0409 392.637 90.7289 393.237 cv
90.4169 393.837 90.2729 394.737 90.2729 395.937 cv
90.2729 397.137 90.4169 398.037 90.7289 398.637 cv
91.0409 399.237 91.4969 399.537 92.1089 399.537 cv
92.7209 399.537 93.1769 399.237 93.4889 398.637 cv
93.7889 398.037 93.9449 397.137 93.9449 395.937 cv
93.9449 394.737 93.7889 393.837 93.4889 393.237 cv
93.1769 392.637 92.7209 392.337 92.1089 392.337 cv
92.1089 391.401 mo
93.0809 391.401 93.8249 391.797 94.3529 392.565 cv
94.8689 393.345 95.1329 394.473 95.1329 395.937 cv
95.1329 397.413 94.8689 398.541 94.3529 399.309 cv
93.8249 400.077 93.0809 400.461 92.1089 400.461 cv
91.1249 400.461 90.3689 400.077 89.8529 399.309 cv
89.3369 398.541 89.0849 397.413 89.0849 395.937 cv
89.0849 394.473 89.3369 393.345 89.8529 392.565 cv
90.3689 391.797 91.1249 391.401 92.1089 391.401 cv
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
146.4 387.18 mo
146.4 43.02 li
@
grestore
146.4 387.18 mo
146.4 383.18 li
f
146.4 387.18 mo
146.4 383.18 li
@
146.4 43.02 mo
146.4 47.02 li
f
146.4 43.02 mo
146.4 47.02 li
@
126.021 399.309 mo
127.953 399.309 li
127.953 392.637 li
125.853 393.057 li
125.853 391.977 li
127.941 391.557 li
129.129 391.557 li
129.129 399.309 li
131.061 399.309 li
131.061 400.305 li
126.021 400.305 li
126.021 399.309 li
f
133.485 400.125 mo
133.485 399.045 li
133.773 399.189 134.073 399.297 134.385 399.369 cv
134.685 399.441 134.985 399.477 135.285 399.477 cv
136.053 399.477 136.653 399.225 137.061 398.697 cv
137.469 398.169 137.709 397.377 137.781 396.297 cv
137.541 396.633 137.253 396.897 136.917 397.077 cv
136.569 397.257 136.185 397.341 135.765 397.341 cv
134.877 397.341 134.181 397.077 133.677 396.549 cv
133.173 396.021 132.921 395.301 132.921 394.377 cv
132.921 393.489 133.185 392.769 133.713 392.217 cv
134.241 391.677 134.949 391.401 135.837 391.401 cv
136.845 391.401 137.625 391.797 138.153 392.565 cv
138.681 393.345 138.957 394.473 138.957 395.937 cv
138.957 397.329 138.621 398.421 137.973 399.237 cv
137.313 400.053 136.437 400.461 135.333 400.461 cv
135.033 400.461 134.733 400.425 134.433 400.377 cv
134.121 400.329 133.809 400.245 133.485 400.125 cv
135.837 396.417 mo
136.365 396.417 136.785 396.237 137.097 395.877 cv
137.409 395.517 137.565 395.013 137.565 394.377 cv
137.565 393.753 137.409 393.249 137.097 392.889 cv
136.785 392.529 136.365 392.337 135.837 392.337 cv
135.309 392.337 134.889 392.529 134.577 392.889 cv
134.265 393.249 134.109 393.753 134.109 394.377 cv
134.109 395.013 134.265 395.517 134.577 395.877 cv
134.889 396.237 135.309 396.417 135.837 396.417 cv
f
143.613 392.337 mo
143.001 392.337 142.545 392.637 142.233 393.237 cv
141.921 393.837 141.777 394.737 141.777 395.937 cv
141.777 397.137 141.921 398.037 142.233 398.637 cv
142.545 399.237 143.001 399.537 143.613 399.537 cv
144.225 399.537 144.681 399.237 144.993 398.637 cv
145.293 398.037 145.449 397.137 145.449 395.937 cv
145.449 394.737 145.293 393.837 144.993 393.237 cv
144.681 392.637 144.225 392.337 143.613 392.337 cv
143.613 391.401 mo
144.585 391.401 145.329 391.797 145.857 392.565 cv
146.373 393.345 146.637 394.473 146.637 395.937 cv
146.637 397.413 146.373 398.541 145.857 399.309 cv
145.329 400.077 144.585 400.461 143.613 400.461 cv
142.629 400.461 141.873 400.077 141.357 399.309 cv
140.841 398.541 140.589 397.413 140.589 395.937 cv
140.589 394.473 140.841 393.345 141.357 392.565 cv
141.873 391.797 142.629 391.401 143.613 391.401 cv
f
151.245 392.337 mo
150.633 392.337 150.177 392.637 149.865 393.237 cv
149.553 393.837 149.409 394.737 149.409 395.937 cv
149.409 397.137 149.553 398.037 149.865 398.637 cv
150.177 399.237 150.633 399.537 151.245 399.537 cv
151.857 399.537 152.313 399.237 152.625 398.637 cv
152.925 398.037 153.081 397.137 153.081 395.937 cv
153.081 394.737 152.925 393.837 152.625 393.237 cv
152.313 392.637 151.857 392.337 151.245 392.337 cv
151.245 391.401 mo
152.217 391.401 152.961 391.797 153.489 392.565 cv
154.005 393.345 154.269 394.473 154.269 395.937 cv
154.269 397.413 154.005 398.541 153.489 399.309 cv
152.961 400.077 152.217 400.461 151.245 400.461 cv
150.261 400.461 149.505 400.077 148.989 399.309 cv
148.473 398.541 148.221 397.413 148.221 395.937 cv
148.221 394.473 148.473 393.345 148.989 392.565 cv
149.505 391.797 150.261 391.401 151.245 391.401 cv
f
158.877 392.337 mo
158.265 392.337 157.809 392.637 157.497 393.237 cv
157.185 393.837 157.041 394.737 157.041 395.937 cv
157.041 397.137 157.185 398.037 157.497 398.637 cv
157.809 399.237 158.265 399.537 158.877 399.537 cv
159.489 399.537 159.945 399.237 160.257 398.637 cv
160.557 398.037 160.713 397.137 160.713 395.937 cv
160.713 394.737 160.557 393.837 160.257 393.237 cv
159.945 392.637 159.489 392.337 158.877 392.337 cv
158.877 391.401 mo
159.849 391.401 160.593 391.797 161.121 392.565 cv
161.637 393.345 161.901 394.473 161.901 395.937 cv
161.901 397.413 161.637 398.541 161.121 399.309 cv
160.593 400.077 159.849 400.461 158.877 400.461 cv
157.893 400.461 157.137 400.077 156.621 399.309 cv
156.105 398.541 155.853 397.413 155.853 395.937 cv
155.853 394.473 156.105 393.345 156.621 392.565 cv
157.137 391.797 157.893 391.401 158.877 391.401 cv
f
166.509 392.337 mo
165.897 392.337 165.441 392.637 165.129 393.237 cv
164.817 393.837 164.673 394.737 164.673 395.937 cv
164.673 397.137 164.817 398.037 165.129 398.637 cv
165.441 399.237 165.897 399.537 166.509 399.537 cv
167.121 399.537 167.577 399.237 167.889 398.637 cv
168.189 398.037 168.345 397.137 168.345 395.937 cv
168.345 394.737 168.189 393.837 167.889 393.237 cv
167.577 392.637 167.121 392.337 166.509 392.337 cv
166.509 391.401 mo
167.481 391.401 168.225 391.797 168.753 392.565 cv
169.269 393.345 169.533 394.473 169.533 395.937 cv
169.533 397.413 169.269 398.541 168.753 399.309 cv
168.225 400.077 167.481 400.461 166.509 400.461 cv
165.525 400.461 164.769 400.077 164.253 399.309 cv
163.737 398.541 163.485 397.413 163.485 395.937 cv
163.485 394.473 163.737 393.345 164.253 392.565 cv
164.769 391.797 165.525 391.401 166.509 391.401 cv
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
220.8 387.18 mo
220.8 43.02 li
@
grestore
220.8 387.18 mo
220.8 383.18 li
f
220.8 387.18 mo
220.8 383.18 li
@
220.8 43.02 mo
220.8 47.02 li
f
220.8 43.02 mo
220.8 47.02 li
@
200.421 399.309 mo
202.353 399.309 li
202.353 392.637 li
200.253 393.057 li
200.253 391.977 li
202.341 391.557 li
203.529 391.557 li
203.529 399.309 li
205.461 399.309 li
205.461 400.305 li
200.421 400.305 li
200.421 399.309 li
f
207.885 400.125 mo
207.885 399.045 li
208.173 399.189 208.473 399.297 208.785 399.369 cv
209.085 399.441 209.385 399.477 209.685 399.477 cv
210.453 399.477 211.053 399.225 211.461 398.697 cv
211.869 398.169 212.109 397.377 212.181 396.297 cv
211.941 396.633 211.653 396.897 211.317 397.077 cv
210.969 397.257 210.585 397.341 210.165 397.341 cv
209.277 397.341 208.581 397.077 208.077 396.549 cv
207.573 396.021 207.321 395.301 207.321 394.377 cv
207.321 393.489 207.585 392.769 208.113 392.217 cv
208.641 391.677 209.349 391.401 210.237 391.401 cv
211.245 391.401 212.025 391.797 212.553 392.565 cv
213.081 393.345 213.357 394.473 213.357 395.937 cv
213.357 397.329 213.021 398.421 212.373 399.237 cv
211.713 400.053 210.837 400.461 209.733 400.461 cv
209.433 400.461 209.133 400.425 208.833 400.377 cv
208.521 400.329 208.209 400.245 207.885 400.125 cv
210.237 396.417 mo
210.765 396.417 211.185 396.237 211.497 395.877 cv
211.809 395.517 211.965 395.013 211.965 394.377 cv
211.965 393.753 211.809 393.249 211.497 392.889 cv
211.185 392.529 210.765 392.337 210.237 392.337 cv
209.709 392.337 209.289 392.529 208.977 392.889 cv
208.665 393.249 208.509 393.753 208.509 394.377 cv
208.509 395.013 208.665 395.517 208.977 395.877 cv
209.289 396.237 209.709 396.417 210.237 396.417 cv
f
215.493 391.557 mo
220.137 391.557 li
220.137 392.553 li
216.573 392.553 li
216.573 394.701 li
216.741 394.641 216.921 394.593 217.089 394.569 cv
217.257 394.545 217.437 394.521 217.605 394.521 cv
218.577 394.521 219.345 394.797 219.921 395.325 cv
220.497 395.865 220.785 396.585 220.785 397.497 cv
220.785 398.445 220.485 399.177 219.897 399.693 cv
219.309 400.209 218.481 400.461 217.425 400.461 cv
217.053 400.461 216.681 400.425 216.297 400.377 cv
215.913 400.317 215.529 400.233 215.121 400.101 cv
215.121 398.913 li
215.469 399.105 215.829 399.249 216.213 399.345 cv
216.585 399.441 216.981 399.477 217.401 399.477 cv
218.073 399.477 218.613 399.309 219.009 398.949 cv
219.393 398.589 219.597 398.109 219.597 397.497 cv
219.597 396.897 219.393 396.417 219.009 396.057 cv
218.613 395.697 218.073 395.517 217.401 395.517 cv
217.089 395.517 216.765 395.553 216.453 395.625 cv
216.141 395.697 215.817 395.805 215.493 395.949 cv
215.493 391.557 li
f
225.645 392.337 mo
225.033 392.337 224.577 392.637 224.265 393.237 cv
223.953 393.837 223.809 394.737 223.809 395.937 cv
223.809 397.137 223.953 398.037 224.265 398.637 cv
224.577 399.237 225.033 399.537 225.645 399.537 cv
226.257 399.537 226.713 399.237 227.025 398.637 cv
227.325 398.037 227.481 397.137 227.481 395.937 cv
227.481 394.737 227.325 393.837 227.025 393.237 cv
226.713 392.637 226.257 392.337 225.645 392.337 cv
225.645 391.401 mo
226.617 391.401 227.361 391.797 227.889 392.565 cv
228.405 393.345 228.669 394.473 228.669 395.937 cv
228.669 397.413 228.405 398.541 227.889 399.309 cv
227.361 400.077 226.617 400.461 225.645 400.461 cv
224.661 400.461 223.905 400.077 223.389 399.309 cv
222.873 398.541 222.621 397.413 222.621 395.937 cv
222.621 394.473 222.873 393.345 223.389 392.565 cv
223.905 391.797 224.661 391.401 225.645 391.401 cv
f
233.277 392.337 mo
232.665 392.337 232.209 392.637 231.897 393.237 cv
231.585 393.837 231.441 394.737 231.441 395.937 cv
231.441 397.137 231.585 398.037 231.897 398.637 cv
232.209 399.237 232.665 399.537 233.277 399.537 cv
233.889 399.537 234.345 399.237 234.657 398.637 cv
234.957 398.037 235.113 397.137 235.113 395.937 cv
235.113 394.737 234.957 393.837 234.657 393.237 cv
234.345 392.637 233.889 392.337 233.277 392.337 cv
233.277 391.401 mo
234.249 391.401 234.993 391.797 235.521 392.565 cv
236.037 393.345 236.301 394.473 236.301 395.937 cv
236.301 397.413 236.037 398.541 235.521 399.309 cv
234.993 400.077 234.249 400.461 233.277 400.461 cv
232.293 400.461 231.537 400.077 231.021 399.309 cv
230.505 398.541 230.253 397.413 230.253 395.937 cv
230.253 394.473 230.505 393.345 231.021 392.565 cv
231.537 391.797 232.293 391.401 233.277 391.401 cv
f
240.909 392.337 mo
240.297 392.337 239.841 392.637 239.529 393.237 cv
239.217 393.837 239.073 394.737 239.073 395.937 cv
239.073 397.137 239.217 398.037 239.529 398.637 cv
239.841 399.237 240.297 399.537 240.909 399.537 cv
241.521 399.537 241.977 399.237 242.289 398.637 cv
242.589 398.037 242.745 397.137 242.745 395.937 cv
242.745 394.737 242.589 393.837 242.289 393.237 cv
241.977 392.637 241.521 392.337 240.909 392.337 cv
240.909 391.401 mo
241.881 391.401 242.625 391.797 243.153 392.565 cv
243.669 393.345 243.933 394.473 243.933 395.937 cv
243.933 397.413 243.669 398.541 243.153 399.309 cv
242.625 400.077 241.881 400.461 240.909 400.461 cv
239.925 400.461 239.169 400.077 238.653 399.309 cv
238.137 398.541 237.885 397.413 237.885 395.937 cv
237.885 394.473 238.137 393.345 238.653 392.565 cv
239.169 391.797 239.925 391.401 240.909 391.401 cv
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
295.2 387.18 mo
295.2 43.02 li
@
grestore
295.2 387.18 mo
295.2 383.18 li
f
295.2 387.18 mo
295.2 383.18 li
@
295.2 43.02 mo
295.2 47.02 li
f
295.2 43.02 mo
295.2 47.02 li
@
275.418 399.309 mo
279.546 399.309 li
279.546 400.305 li
273.99 400.305 li
273.99 399.309 li
274.434 398.853 275.046 398.229 275.826 397.437 cv
276.594 396.657 277.086 396.153 277.29 395.925 cv
277.674 395.505 277.938 395.145 278.082 394.845 cv
278.226 394.557 278.31 394.257 278.31 393.969 cv
278.31 393.513 278.142 393.129 277.818 392.841 cv
277.494 392.553 277.074 392.397 276.546 392.397 cv
276.174 392.397 275.778 392.469 275.37 392.589 cv
274.962 392.721 274.518 392.913 274.05 393.177 cv
274.05 391.977 li
274.53 391.785 274.974 391.641 275.382 391.545 cv
275.79 391.449 276.174 391.401 276.522 391.401 cv
277.422 391.401 278.142 391.629 278.682 392.085 cv
279.222 392.541 279.498 393.141 279.498 393.897 cv
279.498 394.257 279.426 394.605 279.294 394.917 cv
279.162 395.241 278.922 395.625 278.562 396.057 cv
278.466 396.177 278.154 396.501 277.626 397.041 cv
277.098 397.581 276.366 398.337 275.418 399.309 cv
f
284.562 392.337 mo
283.95 392.337 283.494 392.637 283.182 393.237 cv
282.87 393.837 282.726 394.737 282.726 395.937 cv
282.726 397.137 282.87 398.037 283.182 398.637 cv
283.494 399.237 283.95 399.537 284.562 399.537 cv
285.174 399.537 285.63 399.237 285.942 398.637 cv
286.242 398.037 286.398 397.137 286.398 395.937 cv
286.398 394.737 286.242 393.837 285.942 393.237 cv
285.63 392.637 285.174 392.337 284.562 392.337 cv
284.562 391.401 mo
285.534 391.401 286.278 391.797 286.806 392.565 cv
287.322 393.345 287.586 394.473 287.586 395.937 cv
287.586 397.413 287.322 398.541 286.806 399.309 cv
286.278 400.077 285.534 400.461 284.562 400.461 cv
283.578 400.461 282.822 400.077 282.306 399.309 cv
281.79 398.541 281.538 397.413 281.538 395.937 cv
281.538 394.473 281.79 393.345 282.306 392.565 cv
282.822 391.797 283.578 391.401 284.562 391.401 cv
f
292.194 392.337 mo
291.582 392.337 291.126 392.637 290.814 393.237 cv
290.502 393.837 290.358 394.737 290.358 395.937 cv
290.358 397.137 290.502 398.037 290.814 398.637 cv
291.126 399.237 291.582 399.537 292.194 399.537 cv
292.806 399.537 293.262 399.237 293.574 398.637 cv
293.874 398.037 294.03 397.137 294.03 395.937 cv
294.03 394.737 293.874 393.837 293.574 393.237 cv
293.262 392.637 292.806 392.337 292.194 392.337 cv
292.194 391.401 mo
293.166 391.401 293.91 391.797 294.438 392.565 cv
294.954 393.345 295.218 394.473 295.218 395.937 cv
295.218 397.413 294.954 398.541 294.438 399.309 cv
293.91 400.077 293.166 400.461 292.194 400.461 cv
291.21 400.461 290.454 400.077 289.938 399.309 cv
289.422 398.541 289.17 397.413 289.17 395.937 cv
289.17 394.473 289.422 393.345 289.938 392.565 cv
290.454 391.797 291.21 391.401 292.194 391.401 cv
f
299.826 392.337 mo
299.214 392.337 298.758 392.637 298.446 393.237 cv
298.134 393.837 297.99 394.737 297.99 395.937 cv
297.99 397.137 298.134 398.037 298.446 398.637 cv
298.758 399.237 299.214 399.537 299.826 399.537 cv
300.438 399.537 300.894 399.237 301.206 398.637 cv
301.506 398.037 301.662 397.137 301.662 395.937 cv
301.662 394.737 301.506 393.837 301.206 393.237 cv
300.894 392.637 300.438 392.337 299.826 392.337 cv
299.826 391.401 mo
300.798 391.401 301.542 391.797 302.07 392.565 cv
302.586 393.345 302.85 394.473 302.85 395.937 cv
302.85 397.413 302.586 398.541 302.07 399.309 cv
301.542 400.077 300.798 400.461 299.826 400.461 cv
298.842 400.461 298.086 400.077 297.57 399.309 cv
297.054 398.541 296.802 397.413 296.802 395.937 cv
296.802 394.473 297.054 393.345 297.57 392.565 cv
298.086 391.797 298.842 391.401 299.826 391.401 cv
f
307.458 392.337 mo
306.846 392.337 306.39 392.637 306.078 393.237 cv
305.766 393.837 305.622 394.737 305.622 395.937 cv
305.622 397.137 305.766 398.037 306.078 398.637 cv
306.39 399.237 306.846 399.537 307.458 399.537 cv
308.07 399.537 308.526 399.237 308.838 398.637 cv
309.138 398.037 309.294 397.137 309.294 395.937 cv
309.294 394.737 309.138 393.837 308.838 393.237 cv
308.526 392.637 308.07 392.337 307.458 392.337 cv
307.458 391.401 mo
308.43 391.401 309.174 391.797 309.702 392.565 cv
310.218 393.345 310.482 394.473 310.482 395.937 cv
310.482 397.413 310.218 398.541 309.702 399.309 cv
309.174 400.077 308.43 400.461 307.458 400.461 cv
306.474 400.461 305.718 400.077 305.202 399.309 cv
304.686 398.541 304.434 397.413 304.434 395.937 cv
304.434 394.473 304.686 393.345 305.202 392.565 cv
305.718 391.797 306.474 391.401 307.458 391.401 cv
f
315.09 392.337 mo
314.478 392.337 314.022 392.637 313.71 393.237 cv
313.398 393.837 313.254 394.737 313.254 395.937 cv
313.254 397.137 313.398 398.037 313.71 398.637 cv
314.022 399.237 314.478 399.537 315.09 399.537 cv
315.702 399.537 316.158 399.237 316.47 398.637 cv
316.77 398.037 316.926 397.137 316.926 395.937 cv
316.926 394.737 316.77 393.837 316.47 393.237 cv
316.158 392.637 315.702 392.337 315.09 392.337 cv
315.09 391.401 mo
316.062 391.401 316.806 391.797 317.334 392.565 cv
317.85 393.345 318.114 394.473 318.114 395.937 cv
318.114 397.413 317.85 398.541 317.334 399.309 cv
316.806 400.077 316.062 400.461 315.09 400.461 cv
314.106 400.461 313.35 400.077 312.834 399.309 cv
312.318 398.541 312.066 397.413 312.066 395.937 cv
312.066 394.473 312.318 393.345 312.834 392.565 cv
313.35 391.797 314.106 391.401 315.09 391.401 cv
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
369.6 387.18 mo
369.6 43.02 li
@
grestore
369.6 387.18 mo
369.6 383.18 li
f
369.6 387.18 mo
369.6 383.18 li
@
369.6 43.02 mo
369.6 47.02 li
f
369.6 43.02 mo
369.6 47.02 li
@
349.818 399.309 mo
353.946 399.309 li
353.946 400.305 li
348.39 400.305 li
348.39 399.309 li
348.834 398.853 349.446 398.229 350.226 397.437 cv
350.994 396.657 351.486 396.153 351.69 395.925 cv
352.074 395.505 352.338 395.145 352.482 394.845 cv
352.626 394.557 352.71 394.257 352.71 393.969 cv
352.71 393.513 352.542 393.129 352.218 392.841 cv
351.894 392.553 351.474 392.397 350.946 392.397 cv
350.574 392.397 350.178 392.469 349.77 392.589 cv
349.362 392.721 348.918 392.913 348.45 393.177 cv
348.45 391.977 li
348.93 391.785 349.374 391.641 349.782 391.545 cv
350.19 391.449 350.574 391.401 350.922 391.401 cv
351.822 391.401 352.542 391.629 353.082 392.085 cv
353.622 392.541 353.898 393.141 353.898 393.897 cv
353.898 394.257 353.826 394.605 353.694 394.917 cv
353.562 395.241 353.322 395.625 352.962 396.057 cv
352.866 396.177 352.554 396.501 352.026 397.041 cv
351.498 397.581 350.766 398.337 349.818 399.309 cv
f
358.962 392.337 mo
358.35 392.337 357.894 392.637 357.582 393.237 cv
357.27 393.837 357.126 394.737 357.126 395.937 cv
357.126 397.137 357.27 398.037 357.582 398.637 cv
357.894 399.237 358.35 399.537 358.962 399.537 cv
359.574 399.537 360.03 399.237 360.342 398.637 cv
360.642 398.037 360.798 397.137 360.798 395.937 cv
360.798 394.737 360.642 393.837 360.342 393.237 cv
360.03 392.637 359.574 392.337 358.962 392.337 cv
358.962 391.401 mo
359.934 391.401 360.678 391.797 361.206 392.565 cv
361.722 393.345 361.986 394.473 361.986 395.937 cv
361.986 397.413 361.722 398.541 361.206 399.309 cv
360.678 400.077 359.934 400.461 358.962 400.461 cv
357.978 400.461 357.222 400.077 356.706 399.309 cv
356.19 398.541 355.938 397.413 355.938 395.937 cv
355.938 394.473 356.19 393.345 356.706 392.565 cv
357.222 391.797 357.978 391.401 358.962 391.401 cv
f
364.074 391.557 mo
368.718 391.557 li
368.718 392.553 li
365.154 392.553 li
365.154 394.701 li
365.322 394.641 365.502 394.593 365.67 394.569 cv
365.838 394.545 366.018 394.521 366.186 394.521 cv
367.158 394.521 367.926 394.797 368.502 395.325 cv
369.078 395.865 369.366 396.585 369.366 397.497 cv
369.366 398.445 369.066 399.177 368.478 399.693 cv
367.89 400.209 367.062 400.461 366.006 400.461 cv
365.634 400.461 365.262 400.425 364.878 400.377 cv
364.494 400.317 364.11 400.233 363.702 400.101 cv
363.702 398.913 li
364.05 399.105 364.41 399.249 364.794 399.345 cv
365.166 399.441 365.562 399.477 365.982 399.477 cv
366.654 399.477 367.194 399.309 367.59 398.949 cv
367.974 398.589 368.178 398.109 368.178 397.497 cv
368.178 396.897 367.974 396.417 367.59 396.057 cv
367.194 395.697 366.654 395.517 365.982 395.517 cv
365.67 395.517 365.346 395.553 365.034 395.625 cv
364.722 395.697 364.398 395.805 364.074 395.949 cv
364.074 391.557 li
f
374.226 392.337 mo
373.614 392.337 373.158 392.637 372.846 393.237 cv
372.534 393.837 372.39 394.737 372.39 395.937 cv
372.39 397.137 372.534 398.037 372.846 398.637 cv
373.158 399.237 373.614 399.537 374.226 399.537 cv
374.838 399.537 375.294 399.237 375.606 398.637 cv
375.906 398.037 376.062 397.137 376.062 395.937 cv
376.062 394.737 375.906 393.837 375.606 393.237 cv
375.294 392.637 374.838 392.337 374.226 392.337 cv
374.226 391.401 mo
375.198 391.401 375.942 391.797 376.47 392.565 cv
376.986 393.345 377.25 394.473 377.25 395.937 cv
377.25 397.413 376.986 398.541 376.47 399.309 cv
375.942 400.077 375.198 400.461 374.226 400.461 cv
373.242 400.461 372.486 400.077 371.97 399.309 cv
371.454 398.541 371.202 397.413 371.202 395.937 cv
371.202 394.473 371.454 393.345 371.97 392.565 cv
372.486 391.797 373.242 391.401 374.226 391.401 cv
f
381.858 392.337 mo
381.246 392.337 380.79 392.637 380.478 393.237 cv
380.166 393.837 380.022 394.737 380.022 395.937 cv
380.022 397.137 380.166 398.037 380.478 398.637 cv
380.79 399.237 381.246 399.537 381.858 399.537 cv
382.47 399.537 382.926 399.237 383.238 398.637 cv
383.538 398.037 383.694 397.137 383.694 395.937 cv
383.694 394.737 383.538 393.837 383.238 393.237 cv
382.926 392.637 382.47 392.337 381.858 392.337 cv
381.858 391.401 mo
382.83 391.401 383.574 391.797 384.102 392.565 cv
384.618 393.345 384.882 394.473 384.882 395.937 cv
384.882 397.413 384.618 398.541 384.102 399.309 cv
383.574 400.077 382.83 400.461 381.858 400.461 cv
380.874 400.461 380.118 400.077 379.602 399.309 cv
379.086 398.541 378.834 397.413 378.834 395.937 cv
378.834 394.473 379.086 393.345 379.602 392.565 cv
380.118 391.797 380.874 391.401 381.858 391.401 cv
f
389.49 392.337 mo
388.878 392.337 388.422 392.637 388.11 393.237 cv
387.798 393.837 387.654 394.737 387.654 395.937 cv
387.654 397.137 387.798 398.037 388.11 398.637 cv
388.422 399.237 388.878 399.537 389.49 399.537 cv
390.102 399.537 390.558 399.237 390.87 398.637 cv
391.17 398.037 391.326 397.137 391.326 395.937 cv
391.326 394.737 391.17 393.837 390.87 393.237 cv
390.558 392.637 390.102 392.337 389.49 392.337 cv
389.49 391.401 mo
390.462 391.401 391.206 391.797 391.734 392.565 cv
392.25 393.345 392.514 394.473 392.514 395.937 cv
392.514 397.413 392.25 398.541 391.734 399.309 cv
391.206 400.077 390.462 400.461 389.49 400.461 cv
388.506 400.461 387.75 400.077 387.234 399.309 cv
386.718 398.541 386.466 397.413 386.466 395.937 cv
386.466 394.473 386.718 393.345 387.234 392.565 cv
387.75 391.797 388.506 391.401 389.49 391.401 cv
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
444 387.18 mo
444 43.02 li
@
grestore
444 387.18 mo
444 383.18 li
f
444 387.18 mo
444 383.18 li
@
444 43.02 mo
444 47.02 li
f
444 43.02 mo
444 47.02 li
@
424.218 399.309 mo
428.346 399.309 li
428.346 400.305 li
422.79 400.305 li
422.79 399.309 li
423.234 398.853 423.846 398.229 424.626 397.437 cv
425.394 396.657 425.886 396.153 426.09 395.925 cv
426.474 395.505 426.738 395.145 426.882 394.845 cv
427.026 394.557 427.11 394.257 427.11 393.969 cv
427.11 393.513 426.942 393.129 426.618 392.841 cv
426.294 392.553 425.874 392.397 425.346 392.397 cv
424.974 392.397 424.578 392.469 424.17 392.589 cv
423.762 392.721 423.318 392.913 422.85 393.177 cv
422.85 391.977 li
423.33 391.785 423.774 391.641 424.182 391.545 cv
424.59 391.449 424.974 391.401 425.322 391.401 cv
426.222 391.401 426.942 391.629 427.482 392.085 cv
428.022 392.541 428.298 393.141 428.298 393.897 cv
428.298 394.257 428.226 394.605 428.094 394.917 cv
427.962 395.241 427.722 395.625 427.362 396.057 cv
427.266 396.177 426.954 396.501 426.426 397.041 cv
425.898 397.581 425.166 398.337 424.218 399.309 cv
f
431.034 399.309 mo
432.966 399.309 li
432.966 392.637 li
430.866 393.057 li
430.866 391.977 li
432.954 391.557 li
434.142 391.557 li
434.142 399.309 li
436.074 399.309 li
436.074 400.305 li
431.034 400.305 li
431.034 399.309 li
f
440.994 392.337 mo
440.382 392.337 439.926 392.637 439.614 393.237 cv
439.302 393.837 439.158 394.737 439.158 395.937 cv
439.158 397.137 439.302 398.037 439.614 398.637 cv
439.926 399.237 440.382 399.537 440.994 399.537 cv
441.606 399.537 442.062 399.237 442.374 398.637 cv
442.674 398.037 442.83 397.137 442.83 395.937 cv
442.83 394.737 442.674 393.837 442.374 393.237 cv
442.062 392.637 441.606 392.337 440.994 392.337 cv
440.994 391.401 mo
441.966 391.401 442.71 391.797 443.238 392.565 cv
443.754 393.345 444.018 394.473 444.018 395.937 cv
444.018 397.413 443.754 398.541 443.238 399.309 cv
442.71 400.077 441.966 400.461 440.994 400.461 cv
440.01 400.461 439.254 400.077 438.738 399.309 cv
438.222 398.541 437.97 397.413 437.97 395.937 cv
437.97 394.473 438.222 393.345 438.738 392.565 cv
439.254 391.797 440.01 391.401 440.994 391.401 cv
f
448.626 392.337 mo
448.014 392.337 447.558 392.637 447.246 393.237 cv
446.934 393.837 446.79 394.737 446.79 395.937 cv
446.79 397.137 446.934 398.037 447.246 398.637 cv
447.558 399.237 448.014 399.537 448.626 399.537 cv
449.238 399.537 449.694 399.237 450.006 398.637 cv
450.306 398.037 450.462 397.137 450.462 395.937 cv
450.462 394.737 450.306 393.837 450.006 393.237 cv
449.694 392.637 449.238 392.337 448.626 392.337 cv
448.626 391.401 mo
449.598 391.401 450.342 391.797 450.87 392.565 cv
451.386 393.345 451.65 394.473 451.65 395.937 cv
451.65 397.413 451.386 398.541 450.87 399.309 cv
450.342 400.077 449.598 400.461 448.626 400.461 cv
447.642 400.461 446.886 400.077 446.37 399.309 cv
445.854 398.541 445.602 397.413 445.602 395.937 cv
445.602 394.473 445.854 393.345 446.37 392.565 cv
446.886 391.797 447.642 391.401 448.626 391.401 cv
f
456.258 392.337 mo
455.646 392.337 455.19 392.637 454.878 393.237 cv
454.566 393.837 454.422 394.737 454.422 395.937 cv
454.422 397.137 454.566 398.037 454.878 398.637 cv
455.19 399.237 455.646 399.537 456.258 399.537 cv
456.87 399.537 457.326 399.237 457.638 398.637 cv
457.938 398.037 458.094 397.137 458.094 395.937 cv
458.094 394.737 457.938 393.837 457.638 393.237 cv
457.326 392.637 456.87 392.337 456.258 392.337 cv
456.258 391.401 mo
457.23 391.401 457.974 391.797 458.502 392.565 cv
459.018 393.345 459.282 394.473 459.282 395.937 cv
459.282 397.413 459.018 398.541 458.502 399.309 cv
457.974 400.077 457.23 400.461 456.258 400.461 cv
455.274 400.461 454.518 400.077 454.002 399.309 cv
453.486 398.541 453.234 397.413 453.234 395.937 cv
453.234 394.473 453.486 393.345 454.002 392.565 cv
454.518 391.797 455.274 391.401 456.258 391.401 cv
f
463.89 392.337 mo
463.278 392.337 462.822 392.637 462.51 393.237 cv
462.198 393.837 462.054 394.737 462.054 395.937 cv
462.054 397.137 462.198 398.037 462.51 398.637 cv
462.822 399.237 463.278 399.537 463.89 399.537 cv
464.502 399.537 464.958 399.237 465.27 398.637 cv
465.57 398.037 465.726 397.137 465.726 395.937 cv
465.726 394.737 465.57 393.837 465.27 393.237 cv
464.958 392.637 464.502 392.337 463.89 392.337 cv
463.89 391.401 mo
464.862 391.401 465.606 391.797 466.134 392.565 cv
466.65 393.345 466.914 394.473 466.914 395.937 cv
466.914 397.413 466.65 398.541 466.134 399.309 cv
465.606 400.077 464.862 400.461 463.89 400.461 cv
462.906 400.461 462.15 400.077 461.634 399.309 cv
461.118 398.541 460.866 397.413 460.866 395.937 cv
460.866 394.473 461.118 393.345 461.634 392.565 cv
462.15 391.797 462.906 391.401 463.89 391.401 cv
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
518.4 387.18 mo
518.4 43.02 li
@
grestore
518.4 387.18 mo
518.4 383.18 li
f
518.4 387.18 mo
518.4 383.18 li
@
518.4 43.02 mo
518.4 47.02 li
f
518.4 43.02 mo
518.4 47.02 li
@
498.618 399.309 mo
502.746 399.309 li
502.746 400.305 li
497.19 400.305 li
497.19 399.309 li
497.634 398.853 498.246 398.229 499.026 397.437 cv
499.794 396.657 500.286 396.153 500.49 395.925 cv
500.874 395.505 501.138 395.145 501.282 394.845 cv
501.426 394.557 501.51 394.257 501.51 393.969 cv
501.51 393.513 501.342 393.129 501.018 392.841 cv
500.694 392.553 500.274 392.397 499.746 392.397 cv
499.374 392.397 498.978 392.469 498.57 392.589 cv
498.162 392.721 497.718 392.913 497.25 393.177 cv
497.25 391.977 li
497.73 391.785 498.174 391.641 498.582 391.545 cv
498.99 391.449 499.374 391.401 499.722 391.401 cv
500.622 391.401 501.342 391.629 501.882 392.085 cv
502.422 392.541 502.698 393.141 502.698 393.897 cv
502.698 394.257 502.626 394.605 502.494 394.917 cv
502.362 395.241 502.122 395.625 501.762 396.057 cv
501.666 396.177 501.354 396.501 500.826 397.041 cv
500.298 397.581 499.566 398.337 498.618 399.309 cv
f
505.434 399.309 mo
507.366 399.309 li
507.366 392.637 li
505.266 393.057 li
505.266 391.977 li
507.354 391.557 li
508.542 391.557 li
508.542 399.309 li
510.474 399.309 li
510.474 400.305 li
505.434 400.305 li
505.434 399.309 li
f
512.874 391.557 mo
517.518 391.557 li
517.518 392.553 li
513.954 392.553 li
513.954 394.701 li
514.122 394.641 514.302 394.593 514.47 394.569 cv
514.638 394.545 514.818 394.521 514.986 394.521 cv
515.958 394.521 516.726 394.797 517.302 395.325 cv
517.878 395.865 518.166 396.585 518.166 397.497 cv
518.166 398.445 517.866 399.177 517.278 399.693 cv
516.69 400.209 515.862 400.461 514.806 400.461 cv
514.434 400.461 514.062 400.425 513.678 400.377 cv
513.294 400.317 512.91 400.233 512.502 400.101 cv
512.502 398.913 li
512.85 399.105 513.21 399.249 513.594 399.345 cv
513.966 399.441 514.362 399.477 514.782 399.477 cv
515.454 399.477 515.994 399.309 516.39 398.949 cv
516.774 398.589 516.978 398.109 516.978 397.497 cv
516.978 396.897 516.774 396.417 516.39 396.057 cv
515.994 395.697 515.454 395.517 514.782 395.517 cv
514.47 395.517 514.146 395.553 513.834 395.625 cv
513.522 395.697 513.198 395.805 512.874 395.949 cv
512.874 391.557 li
f
523.026 392.337 mo
522.414 392.337 521.958 392.637 521.646 393.237 cv
521.334 393.837 521.19 394.737 521.19 395.937 cv
521.19 397.137 521.334 398.037 521.646 398.637 cv
521.958 399.237 522.414 399.537 523.026 399.537 cv
523.638 399.537 524.094 399.237 524.406 398.637 cv
524.706 398.037 524.862 397.137 524.862 395.937 cv
524.862 394.737 524.706 393.837 524.406 393.237 cv
524.094 392.637 523.638 392.337 523.026 392.337 cv
523.026 391.401 mo
523.998 391.401 524.742 391.797 525.27 392.565 cv
525.786 393.345 526.05 394.473 526.05 395.937 cv
526.05 397.413 525.786 398.541 525.27 399.309 cv
524.742 400.077 523.998 400.461 523.026 400.461 cv
522.042 400.461 521.286 400.077 520.77 399.309 cv
520.254 398.541 520.002 397.413 520.002 395.937 cv
520.002 394.473 520.254 393.345 520.77 392.565 cv
521.286 391.797 522.042 391.401 523.026 391.401 cv
f
530.658 392.337 mo
530.046 392.337 529.59 392.637 529.278 393.237 cv
528.966 393.837 528.822 394.737 528.822 395.937 cv
528.822 397.137 528.966 398.037 529.278 398.637 cv
529.59 399.237 530.046 399.537 530.658 399.537 cv
531.27 399.537 531.726 399.237 532.038 398.637 cv
532.338 398.037 532.494 397.137 532.494 395.937 cv
532.494 394.737 532.338 393.837 532.038 393.237 cv
531.726 392.637 531.27 392.337 530.658 392.337 cv
530.658 391.401 mo
531.63 391.401 532.374 391.797 532.902 392.565 cv
533.418 393.345 533.682 394.473 533.682 395.937 cv
533.682 397.413 533.418 398.541 532.902 399.309 cv
532.374 400.077 531.63 400.461 530.658 400.461 cv
529.674 400.461 528.918 400.077 528.402 399.309 cv
527.886 398.541 527.634 397.413 527.634 395.937 cv
527.634 394.473 527.886 393.345 528.402 392.565 cv
528.918 391.797 529.674 391.401 530.658 391.401 cv
f
538.29 392.337 mo
537.678 392.337 537.222 392.637 536.91 393.237 cv
536.598 393.837 536.454 394.737 536.454 395.937 cv
536.454 397.137 536.598 398.037 536.91 398.637 cv
537.222 399.237 537.678 399.537 538.29 399.537 cv
538.902 399.537 539.358 399.237 539.67 398.637 cv
539.97 398.037 540.126 397.137 540.126 395.937 cv
540.126 394.737 539.97 393.837 539.67 393.237 cv
539.358 392.637 538.902 392.337 538.29 392.337 cv
538.29 391.401 mo
539.262 391.401 540.006 391.797 540.534 392.565 cv
541.05 393.345 541.314 394.473 541.314 395.937 cv
541.314 397.413 541.05 398.541 540.534 399.309 cv
540.006 400.077 539.262 400.461 538.29 400.461 cv
537.306 400.461 536.55 400.077 536.034 399.309 cv
535.518 398.541 535.266 397.413 535.266 395.937 cv
535.266 394.473 535.518 393.345 536.034 392.565 cv
536.55 391.797 537.306 391.401 538.29 391.401 cv
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
72 387.18 mo
518.4 387.18 li
@
grestore
72 387.18 mo
76 387.18 li
f
72 387.18 mo
76 387.18 li
@
518.4 387.18 mo
514.4 387.18 li
f
518.4 387.18 mo
514.4 387.18 li
@
65.7691 382.525 mo
65.1571 382.525 64.7011 382.825 64.3891 383.425 cv
64.0771 384.025 63.9331 384.925 63.9331 386.125 cv
63.9331 387.325 64.0771 388.225 64.3891 388.825 cv
64.7011 389.425 65.1571 389.725 65.7691 389.725 cv
66.3811 389.725 66.8371 389.425 67.1491 388.825 cv
67.4491 388.225 67.6051 387.325 67.6051 386.125 cv
67.6051 384.925 67.4491 384.025 67.1491 383.425 cv
66.8371 382.825 66.3811 382.525 65.7691 382.525 cv
65.7691 381.589 mo
66.7411 381.589 67.4851 381.985 68.0131 382.753 cv
68.5291 383.533 68.7931 384.661 68.7931 386.125 cv
68.7931 387.601 68.5291 388.729 68.0131 389.497 cv
67.4851 390.265 66.7411 390.649 65.7691 390.649 cv
64.7851 390.649 64.0291 390.265 63.5131 389.497 cv
62.9971 388.729 62.7451 387.601 62.7451 386.125 cv
62.7451 384.661 62.9971 383.533 63.5131 382.753 cv
64.0291 381.985 64.7851 381.589 65.7691 381.589 cv
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
72 348.94 mo
518.4 348.94 li
@
grestore
72 348.94 mo
76 348.94 li
f
72 348.94 mo
76 348.94 li
@
518.4 348.94 mo
514.4 348.94 li
f
518.4 348.94 mo
514.4 348.94 li
@
64.7415 351.257 mo
68.8695 351.257 li
68.8695 352.253 li
63.3135 352.253 li
63.3135 351.257 li
63.7575 350.801 64.3695 350.177 65.1495 349.384 cv
65.9175 348.604 66.4095 348.1 66.6135 347.872 cv
66.9975 347.453 67.2615 347.092 67.4055 346.793 cv
67.5495 346.505 67.6335 346.204 67.6335 345.917 cv
67.6335 345.461 67.4655 345.077 67.1415 344.789 cv
66.8175 344.5 66.3975 344.345 65.8695 344.345 cv
65.4975 344.345 65.1015 344.417 64.6935 344.536 cv
64.2855 344.668 63.8415 344.861 63.3735 345.125 cv
63.3735 343.924 li
63.8535 343.733 64.2975 343.589 64.7055 343.492 cv
65.1135 343.397 65.4975 343.349 65.8455 343.349 cv
66.7455 343.349 67.4655 343.577 68.0055 344.033 cv
68.5455 344.488 68.8215 345.089 68.8215 345.845 cv
68.8215 346.204 68.7495 346.552 68.6175 346.865 cv
68.4855 347.189 68.2455 347.573 67.8855 348.005 cv
67.7895 348.125 67.4775 348.449 66.9495 348.988 cv
66.4215 349.529 65.6895 350.285 64.7415 351.257 cv
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
72 310.7 mo
518.4 310.7 li
@
grestore
72 310.7 mo
76 310.7 li
f
72 310.7 mo
76 310.7 li
@
518.4 310.7 mo
514.4 310.7 li
f
518.4 310.7 mo
514.4 310.7 li
@
66.161 306.297 mo
63.173 310.965 li
66.161 310.965 li
66.161 306.297 li
65.849 305.265 mo
67.337 305.265 li
67.337 310.965 li
68.585 310.965 li
68.585 311.949 li
67.337 311.949 li
67.337 314.013 li
66.161 314.013 li
66.161 311.949 li
62.213 311.949 li
62.213 310.809 li
65.849 305.265 li
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
72 272.46 mo
518.4 272.46 li
@
grestore
72 272.46 mo
76 272.46 li
f
72 272.46 mo
76 272.46 li
@
518.4 272.46 mo
514.4 272.46 li
f
518.4 272.46 mo
514.4 272.46 li
@
65.9287 270.925 mo
65.4007 270.925 64.9808 271.117 64.6687 271.477 cv
64.3568 271.837 64.2008 272.341 64.2008 272.965 cv
64.2008 273.601 64.3568 274.105 64.6687 274.465 cv
64.9808 274.825 65.4007 275.005 65.9287 275.005 cv
66.4567 275.005 66.8767 274.825 67.1888 274.465 cv
67.5007 274.105 67.6568 273.601 67.6568 272.965 cv
67.6568 272.341 67.5007 271.837 67.1888 271.477 cv
66.8767 271.117 66.4567 270.925 65.9287 270.925 cv
68.2807 267.217 mo
68.2807 268.297 li
67.9808 268.153 67.6807 268.045 67.3808 267.973 cv
67.0687 267.901 66.7688 267.865 66.4808 267.865 cv
65.6888 267.865 65.0888 268.129 64.6807 268.657 cv
64.2728 269.185 64.0328 269.989 63.9847 271.045 cv
64.2128 270.709 64.5007 270.445 64.8487 270.265 cv
65.1967 270.085 65.5807 269.989 66.0007 269.989 cv
66.8767 269.989 67.5728 270.265 68.0768 270.793 cv
68.5807 271.321 68.8447 272.053 68.8447 272.965 cv
68.8447 273.865 68.5687 274.585 68.0407 275.125 cv
67.5127 275.665 66.8047 275.929 65.9287 275.929 cv
64.9208 275.929 64.1407 275.545 63.6128 274.777 cv
63.0728 274.009 62.8088 272.881 62.8088 271.405 cv
62.8088 270.025 63.1328 268.921 63.7928 268.105 cv
64.4408 267.289 65.3288 266.869 66.4327 266.869 cv
66.7207 266.869 67.0208 266.905 67.3327 266.953 cv
67.6328 267.013 67.9447 267.097 68.2807 267.217 cv
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
72 234.22 mo
518.4 234.22 li
@
grestore
72 234.22 mo
76 234.22 li
f
72 234.22 mo
76 234.22 li
@
518.4 234.22 mo
514.4 234.22 li
f
518.4 234.22 mo
514.4 234.22 li
@
65.816 233.381 mo
65.252 233.381 64.808 233.537 64.484 233.837 cv
64.16 234.137 64.004 234.545 64.004 235.073 cv
64.004 235.601 64.16 236.021 64.484 236.321 cv
64.808 236.621 65.252 236.765 65.816 236.765 cv
66.368 236.765 66.812 236.621 67.136 236.309 cv
67.46 236.009 67.628 235.601 67.628 235.073 cv
67.628 234.545 67.46 234.137 67.148 233.837 cv
66.824 233.537 66.38 233.381 65.816 233.381 cv
64.628 232.877 mo
64.124 232.757 63.728 232.517 63.44 232.169 cv
63.152 231.821 63.02 231.401 63.02 230.897 cv
63.02 230.201 63.26 229.649 63.764 229.241 cv
64.256 228.833 64.94 228.629 65.816 228.629 cv
66.68 228.629 67.364 228.833 67.868 229.241 cv
68.36 229.649 68.612 230.201 68.612 230.897 cv
68.612 231.401 68.468 231.821 68.18 232.169 cv
67.892 232.517 67.508 232.757 67.004 232.877 cv
67.568 233.009 68.012 233.273 68.336 233.657 cv
68.648 234.041 68.816 234.521 68.816 235.073 cv
68.816 235.925 68.552 236.573 68.036 237.017 cv
67.508 237.473 66.776 237.689 65.816 237.689 cv
64.844 237.689 64.1 237.473 63.584 237.017 cv
63.068 236.573 62.816 235.925 62.816 235.073 cv
62.816 234.521 62.972 234.041 63.296 233.657 cv
63.608 233.273 64.052 233.009 64.628 232.877 cv
64.196 231.005 mo
64.196 231.461 64.328 231.821 64.616 232.073 cv
64.904 232.325 65.3 232.445 65.816 232.445 cv
66.32 232.445 66.716 232.325 67.004 232.073 cv
67.292 231.821 67.436 231.461 67.436 231.005 cv
67.436 230.549 67.292 230.201 67.004 229.949 cv
66.716 229.697 66.32 229.565 65.816 229.565 cv
65.3 229.565 64.904 229.697 64.616 229.949 cv
64.328 230.201 64.196 230.549 64.196 231.005 cv
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
72 195.98 mo
518.4 195.98 li
@
grestore
72 195.98 mo
76 195.98 li
f
72 195.98 mo
76 195.98 li
@
518.4 195.98 mo
514.4 195.98 li
f
518.4 195.98 mo
514.4 195.98 li
@
56.3161 198.297 mo
58.2481 198.297 li
58.2481 191.625 li
56.1481 192.045 li
56.1481 190.965 li
58.2361 190.545 li
59.4241 190.545 li
59.4241 198.297 li
61.3561 198.297 li
61.3561 199.293 li
56.3161 199.293 li
56.3161 198.297 li
f
66.2761 191.325 mo
65.6641 191.325 65.2081 191.625 64.8961 192.225 cv
64.5841 192.825 64.4401 193.725 64.4401 194.925 cv
64.4401 196.125 64.5841 197.025 64.8961 197.625 cv
65.2081 198.225 65.6641 198.525 66.2761 198.525 cv
66.8881 198.525 67.3441 198.225 67.6561 197.625 cv
67.9561 197.025 68.1121 196.125 68.1121 194.925 cv
68.1121 193.725 67.9561 192.825 67.6561 192.225 cv
67.3441 191.625 66.8881 191.325 66.2761 191.325 cv
66.2761 190.389 mo
67.2481 190.389 67.9921 190.785 68.5201 191.553 cv
69.0361 192.333 69.3001 193.461 69.3001 194.925 cv
69.3001 196.401 69.0361 197.529 68.5201 198.297 cv
67.9921 199.065 67.2481 199.449 66.2761 199.449 cv
65.2921 199.449 64.5361 199.065 64.0201 198.297 cv
63.5041 197.529 63.2521 196.401 63.2521 194.925 cv
63.2521 193.461 63.5041 192.333 64.0201 191.553 cv
64.5361 190.785 65.2921 190.389 66.2761 190.389 cv
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
72 157.74 mo
518.4 157.74 li
@
grestore
72 157.74 mo
76 157.74 li
f
72 157.74 mo
76 157.74 li
@
518.4 157.74 mo
514.4 157.74 li
f
518.4 157.74 mo
514.4 157.74 li
@
56.7224 160.057 mo
58.6544 160.057 li
58.6544 153.385 li
56.5544 153.805 li
56.5544 152.725 li
58.6424 152.305 li
59.8304 152.305 li
59.8304 160.057 li
61.7624 160.057 li
61.7624 161.053 li
56.7224 161.053 li
56.7224 160.057 li
f
65.1704 160.057 mo
69.2984 160.057 li
69.2984 161.053 li
63.7424 161.053 li
63.7424 160.057 li
64.1864 159.601 64.7984 158.977 65.5784 158.185 cv
66.3464 157.405 66.8384 156.901 67.0424 156.673 cv
67.4264 156.253 67.6904 155.893 67.8344 155.593 cv
67.9784 155.305 68.0624 155.005 68.0624 154.717 cv
68.0624 154.261 67.8944 153.877 67.5704 153.589 cv
67.2464 153.301 66.8264 153.145 66.2984 153.145 cv
65.9264 153.145 65.5304 153.217 65.1224 153.337 cv
64.7144 153.469 64.2704 153.661 63.8024 153.925 cv
63.8024 152.725 li
64.2824 152.533 64.7264 152.389 65.1344 152.293 cv
65.5424 152.197 65.9264 152.149 66.2744 152.149 cv
67.1744 152.149 67.8944 152.377 68.4344 152.833 cv
68.9744 153.289 69.2504 153.889 69.2504 154.645 cv
69.2504 155.005 69.1784 155.353 69.0464 155.665 cv
68.9144 155.989 68.6744 156.373 68.3144 156.805 cv
68.2184 156.925 67.9064 157.249 67.3784 157.789 cv
66.8504 158.329 66.1184 159.085 65.1704 160.057 cv
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
72 119.5 mo
518.4 119.5 li
@
grestore
72 119.5 mo
76 119.5 li
f
72 119.5 mo
76 119.5 li
@
518.4 119.5 mo
514.4 119.5 li
f
518.4 119.5 mo
514.4 119.5 li
@
56.1911 121.816 mo
58.1231 121.816 li
58.1231 115.145 li
56.0231 115.564 li
56.0231 114.484 li
58.1111 114.064 li
59.2991 114.064 li
59.2991 121.816 li
61.2311 121.816 li
61.2311 122.813 li
56.1911 122.813 li
56.1911 121.816 li
f
66.8711 115.096 mo
63.8831 119.765 li
66.8711 119.765 li
66.8711 115.096 li
66.5591 114.064 mo
68.0471 114.064 li
68.0471 119.765 li
69.2951 119.765 li
69.2951 120.748 li
68.0471 120.748 li
68.0471 122.813 li
66.8711 122.813 li
66.8711 120.748 li
62.9231 120.748 li
62.9231 119.608 li
66.5591 114.064 li
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
72 81.26 mo
518.4 81.26 li
@
grestore
72 81.26 mo
76 81.26 li
f
72 81.26 mo
76 81.26 li
@
518.4 81.26 mo
514.4 81.26 li
f
518.4 81.26 mo
514.4 81.26 li
@
56.2849 83.5765 mo
58.2169 83.5765 li
58.2169 76.9045 li
56.1169 77.3245 li
56.1169 76.2445 li
58.2049 75.8245 li
59.3929 75.8245 li
59.3929 83.5765 li
61.3249 83.5765 li
61.3249 84.5725 li
56.2849 84.5725 li
56.2849 83.5765 li
f
66.3889 79.7245 mo
65.8609 79.7245 65.4409 79.9165 65.1289 80.2765 cv
64.8169 80.6365 64.6609 81.1405 64.6609 81.7645 cv
64.6609 82.4005 64.8169 82.9045 65.1289 83.2645 cv
65.4409 83.6245 65.8609 83.8045 66.3889 83.8045 cv
66.9169 83.8045 67.3369 83.6245 67.6489 83.2645 cv
67.9609 82.9045 68.1169 82.4005 68.1169 81.7645 cv
68.1169 81.1405 67.9609 80.6365 67.6489 80.2765 cv
67.3369 79.9165 66.9169 79.7245 66.3889 79.7245 cv
68.7409 76.0165 mo
68.7409 77.0965 li
68.4409 76.9525 68.1409 76.8445 67.8409 76.7725 cv
67.5289 76.7005 67.2289 76.6645 66.9409 76.6645 cv
66.1489 76.6645 65.5489 76.9285 65.1409 77.4565 cv
64.7329 77.9845 64.4929 78.7885 64.4449 79.8445 cv
64.6729 79.5085 64.9609 79.2445 65.3089 79.0645 cv
65.6569 78.8845 66.0409 78.7885 66.4609 78.7885 cv
67.3369 78.7885 68.0329 79.0645 68.5369 79.5925 cv
69.0409 80.1205 69.3049 80.8525 69.3049 81.7645 cv
69.3049 82.6645 69.0289 83.3845 68.5009 83.9245 cv
67.9729 84.4645 67.2649 84.7285 66.3889 84.7285 cv
65.3809 84.7285 64.6009 84.3445 64.0729 83.5765 cv
63.5329 82.8085 63.2689 81.6805 63.2689 80.2045 cv
63.2689 78.8245 63.5929 77.7205 64.2529 76.9045 cv
64.9009 76.0885 65.7889 75.6685 66.8929 75.6685 cv
67.1809 75.6685 67.4809 75.7045 67.7929 75.7525 cv
68.0929 75.8125 68.4049 75.8965 68.7409 76.0165 cv
f
gsave
72 387.18 mo
518.4 387.18 li
518.4 43.02 li
72 43.02 li
cp
clp
[1 3 ] 0 dsh
72 43.02 mo
518.4 43.02 li
@
grestore
72 43.02 mo
76 43.02 li
f
72 43.02 mo
76 43.02 li
@
518.4 43.02 mo
514.4 43.02 li
f
518.4 43.02 mo
514.4 43.02 li
@
56.3474 45.3365 mo
58.2794 45.3365 li
58.2794 38.6645 li
56.1794 39.0845 li
56.1794 38.0045 li
58.2674 37.5845 li
59.4554 37.5845 li
59.4554 45.3365 li
61.3874 45.3365 li
61.3874 46.3325 li
56.3474 46.3325 li
56.3474 45.3365 li
f
66.3074 42.1805 mo
65.7434 42.1805 65.2994 42.3365 64.9754 42.6365 cv
64.6514 42.9365 64.4954 43.3445 64.4954 43.8725 cv
64.4954 44.4005 64.6514 44.8205 64.9754 45.1205 cv
65.2994 45.4205 65.7434 45.5645 66.3074 45.5645 cv
66.8594 45.5645 67.3034 45.4205 67.6274 45.1085 cv
67.9514 44.8085 68.1194 44.4005 68.1194 43.8725 cv
68.1194 43.3445 67.9514 42.9365 67.6394 42.6365 cv
67.3154 42.3365 66.8714 42.1805 66.3074 42.1805 cv
65.1194 41.6765 mo
64.6154 41.5565 64.2194 41.3165 63.9314 40.9685 cv
63.6434 40.6205 63.5114 40.2005 63.5114 39.6965 cv
63.5114 39.0005 63.7514 38.4485 64.2554 38.0405 cv
64.7474 37.6325 65.4314 37.4285 66.3074 37.4285 cv
67.1714 37.4285 67.8554 37.6325 68.3594 38.0405 cv
68.8514 38.4485 69.1034 39.0005 69.1034 39.6965 cv
69.1034 40.2005 68.9594 40.6205 68.6714 40.9685 cv
68.3834 41.3165 67.9994 41.5565 67.4954 41.6765 cv
68.0594 41.8085 68.5034 42.0725 68.8274 42.4565 cv
69.1394 42.8405 69.3074 43.3205 69.3074 43.8725 cv
69.3074 44.7245 69.0434 45.3725 68.5274 45.8165 cv
67.9994 46.2725 67.2674 46.4885 66.3074 46.4885 cv
65.3354 46.4885 64.5914 46.2725 64.0754 45.8165 cv
63.5594 45.3725 63.3074 44.7245 63.3074 43.8725 cv
63.3074 43.3205 63.4634 42.8405 63.7874 42.4565 cv
64.0994 42.0725 64.5434 41.8085 65.1194 41.6765 cv
64.6874 39.8045 mo
64.6874 40.2605 64.8194 40.6205 65.1074 40.8725 cv
65.3954 41.1245 65.7914 41.2445 66.3074 41.2445 cv
66.8114 41.2445 67.2074 41.1245 67.4954 40.8725 cv
67.7834 40.6205 67.9274 40.2605 67.9274 39.8045 cv
67.9274 39.3485 67.7834 39.0005 67.4954 38.7485 cv
67.2074 38.4965 66.8114 38.3645 66.3074 38.3645 cv
65.7914 38.3645 65.3954 38.4965 65.1074 38.7485 cv
64.8194 39.0005 64.6874 39.3485 64.6874 39.8045 cv
f
236.908 27.5224 mo
242.942 27.5224 li
242.942 28.7176 li
238.334 28.7176 li
238.334 31.8136 li
242.495 31.8136 li
242.495 33.0088 li
238.334 33.0088 li
238.334 38.02 li
236.908 38.02 li
236.908 27.5224 li
f
245.188 27.5224 mo
247.305 27.5224 li
249.983 34.6648 li
252.676 27.5224 li
254.793 27.5224 li
254.793 38.02 li
253.41 38.02 li
253.41 28.804 li
250.703 36.004 li
249.278 36.004 li
246.57 28.804 li
246.57 38.02 li
245.188 38.02 li
245.188 27.5224 li
f
260.783 28.4584 mo
260.049 28.4584 259.502 28.8184 259.127 29.5384 cv
258.753 30.2584 258.58 31.3384 258.58 32.7784 cv
258.58 34.2184 258.753 35.2984 259.127 36.0184 cv
259.502 36.7384 260.049 37.0984 260.783 37.0984 cv
261.518 37.0984 262.065 36.7384 262.439 36.0184 cv
262.799 35.2984 262.987 34.2184 262.987 32.7784 cv
262.987 31.3384 262.799 30.2584 262.439 29.5384 cv
262.065 28.8184 261.518 28.4584 260.783 28.4584 cv
260.783 27.3352 mo
261.95 27.3352 262.843 27.8104 263.476 28.732 cv
264.095 29.668 264.412 31.0216 264.412 32.7784 cv
264.412 34.5496 264.095 35.9032 263.476 36.8248 cv
262.843 37.7464 261.95 38.2072 260.783 38.2072 cv
259.603 38.2072 258.695 37.7464 258.076 36.8248 cv
257.457 35.9032 257.155 34.5496 257.155 32.7784 cv
257.155 31.0216 257.457 29.668 258.076 28.732 cv
258.695 27.8104 259.603 27.3352 260.783 27.3352 cv
f
277.646 27.868 mo
277.646 29.2504 li
277.098 28.9912 276.594 28.804 276.119 28.6744 cv
275.63 28.5592 275.169 28.4872 274.737 28.4872 cv
273.959 28.4872 273.354 28.6456 272.937 28.9336 cv
272.519 29.236 272.318 29.668 272.318 30.2152 cv
272.318 30.676 272.447 31.036 272.735 31.2664 cv
273.009 31.5112 273.542 31.6984 274.319 31.8424 cv
275.183 32.0152 li
276.234 32.2168 277.012 32.5768 277.516 33.0808 cv
278.02 33.5992 278.279 34.276 278.279 35.1256 cv
278.279 36.148 277.934 36.9112 277.257 37.4296 cv
276.566 37.948 275.572 38.2072 274.262 38.2072 cv
273.758 38.2072 273.225 38.1496 272.663 38.0488 cv
272.102 37.948 271.526 37.7896 270.935 37.5592 cv
270.935 36.0904 li
271.511 36.4216 272.073 36.6664 272.62 36.8248 cv
273.167 36.9976 273.714 37.0696 274.262 37.0696 cv
275.068 37.0696 275.687 36.9112 276.134 36.5944 cv
276.566 36.2776 276.796 35.8312 276.796 35.2264 cv
276.796 34.708 276.638 34.3048 276.321 34.0168 cv
276.004 33.7288 275.486 33.5128 274.766 33.3688 cv
273.902 33.196 li
272.836 32.9944 272.073 32.6632 271.598 32.2024 cv
271.122 31.756 270.892 31.1368 270.892 30.3304 cv
270.892 29.4088 271.209 28.6744 271.871 28.1416 cv
272.519 27.6088 273.426 27.3352 274.578 27.3352 cv
275.068 27.3352 275.558 27.3784 276.076 27.4648 cv
276.58 27.5512 277.098 27.6952 277.646 27.868 cv
f
280.439 27.076 mo
281.735 27.076 li
281.735 38.02 li
280.439 38.02 li
280.439 27.076 li
f
287.495 31.0504 mo
286.804 31.0504 286.257 31.324 285.854 31.8712 cv
285.45 32.4184 285.249 33.1528 285.249 34.0888 cv
285.249 35.0392 285.436 35.7736 285.839 36.3208 cv
286.242 36.868 286.79 37.1272 287.495 37.1272 cv
288.186 37.1272 288.734 36.868 289.137 36.3208 cv
289.54 35.7736 289.742 35.0392 289.742 34.0888 cv
289.742 33.1672 289.54 32.4184 289.137 31.8712 cv
288.734 31.324 288.186 31.0504 287.495 31.0504 cv
287.495 29.956 mo
288.618 29.956 289.497 30.3304 290.145 31.0504 cv
290.778 31.7848 291.11 32.7928 291.11 34.0888 cv
291.11 35.3848 290.778 36.3928 290.145 37.1128 cv
289.497 37.8472 288.618 38.2072 287.495 38.2072 cv
286.358 38.2072 285.465 37.8472 284.831 37.1128 cv
284.198 36.3928 283.881 35.3848 283.881 34.0888 cv
283.881 32.7928 284.198 31.7848 284.831 31.0504 cv
285.465 30.3304 286.358 29.956 287.495 29.956 cv
f
294.508 36.8392 mo
294.508 41.0008 li
293.212 41.0008 li
293.212 30.1432 li
294.508 30.1432 li
294.508 31.3384 li
294.767 30.8776 295.113 30.532 295.53 30.3016 cv
295.948 30.0712 296.452 29.956 297.028 29.956 cv
297.978 29.956 298.756 30.3448 299.361 31.0936 cv
299.951 31.8568 300.254 32.8504 300.254 34.0888 cv
300.254 35.3272 299.951 36.3352 299.361 37.084 cv
298.756 37.8328 297.978 38.2072 297.028 38.2072 cv
296.452 38.2072 295.948 38.092 295.53 37.876 cv
295.113 37.66 294.767 37.3144 294.508 36.8392 cv
298.914 34.0888 mo
298.914 33.1384 298.713 32.404 298.324 31.8568 cv
297.921 31.3096 297.388 31.036 296.711 31.036 cv
296.02 31.036 295.487 31.3096 295.098 31.8568 cv
294.695 32.404 294.508 33.1384 294.508 34.0888 cv
294.508 35.0392 294.695 35.788 295.098 36.3352 cv
295.487 36.8824 296.02 37.1416 296.711 37.1416 cv
297.388 37.1416 297.921 36.8824 298.324 36.3352 cv
298.713 35.788 298.914 35.0392 298.914 34.0888 cv
f
309.138 33.7576 mo
309.138 34.3912 li
303.191 34.3912 li
303.249 35.284 303.508 35.9752 303.997 36.436 cv
304.473 36.8968 305.135 37.1272 305.999 37.1272 cv
306.489 37.1272 306.978 37.0696 307.439 36.9544 cv
307.9 36.8392 308.375 36.652 308.836 36.3928 cv
308.836 37.6168 li
308.375 37.8184 307.9 37.9768 307.41 38.0632 cv
306.921 38.1496 306.417 38.2072 305.927 38.2072 cv
304.66 38.2072 303.666 37.8472 302.932 37.1272 cv
302.197 36.4072 301.837 35.4136 301.837 34.1608 cv
301.837 32.8792 302.183 31.8568 302.874 31.0936 cv
303.565 30.3448 304.516 29.956 305.697 29.956 cv
306.762 29.956 307.597 30.3016 308.217 30.9784 cv
308.821 31.6696 309.138 32.5912 309.138 33.7576 cv
307.842 33.3832 mo
307.828 32.6776 307.626 32.116 307.252 31.684 cv
306.863 31.2664 306.345 31.0504 305.711 31.0504 cv
304.991 31.0504 304.415 31.2664 303.983 31.6696 cv
303.551 32.0728 303.292 32.6488 303.234 33.3832 cv
307.842 33.3832 li
f
314.481 28.4584 mo
313.746 28.4584 313.199 28.8184 312.825 29.5384 cv
312.45 30.2584 312.278 31.3384 312.278 32.7784 cv
312.278 34.2184 312.45 35.2984 312.825 36.0184 cv
313.199 36.7384 313.746 37.0984 314.481 37.0984 cv
315.215 37.0984 315.762 36.7384 316.137 36.0184 cv
316.497 35.2984 316.684 34.2184 316.684 32.7784 cv
316.684 31.3384 316.497 30.2584 316.137 29.5384 cv
315.762 28.8184 315.215 28.4584 314.481 28.4584 cv
314.481 27.3352 mo
315.647 27.3352 316.54 27.8104 317.174 28.732 cv
317.793 29.668 318.11 31.0216 318.11 32.7784 cv
318.11 34.5496 317.793 35.9032 317.174 36.8248 cv
316.54 37.7464 315.647 38.2072 314.481 38.2072 cv
313.3 38.2072 312.393 37.7464 311.774 36.8248 cv
311.154 35.9032 310.852 34.5496 310.852 32.7784 cv
310.852 31.0216 311.154 29.668 311.774 28.732 cv
312.393 27.8104 313.3 27.3352 314.481 27.3352 cv
f
330.033 33.0952 mo
330.335 33.2104 330.638 33.4264 330.926 33.7576 cv
331.214 34.1032 331.501 34.564 331.789 35.1544 cv
333.229 38.02 li
331.703 38.02 li
330.364 35.3272 li
330.018 34.636 329.673 34.1608 329.356 33.9304 cv
329.025 33.7 328.578 33.5848 328.017 33.5848 cv
326.476 33.5848 li
326.476 38.02 li
325.05 38.02 li
325.05 27.5224 li
328.262 27.5224 li
329.457 27.5224 330.349 27.7816 330.94 28.2712 cv
331.53 28.7752 331.833 29.5384 331.833 30.5464 cv
331.833 31.2088 331.674 31.7704 331.372 32.2024 cv
331.055 32.6344 330.609 32.9368 330.033 33.0952 cv
326.476 28.6888 mo
326.476 32.4184 li
328.262 32.4184 li
328.938 32.4184 329.457 32.26 329.802 31.9432 cv
330.148 31.6264 330.335 31.1656 330.335 30.5464 cv
330.335 29.9416 330.148 29.4808 329.802 29.164 cv
329.457 28.8472 328.938 28.6888 328.262 28.6888 cv
326.476 28.6888 li
f
341.74 33.7576 mo
341.74 34.3912 li
335.793 34.3912 li
335.85 35.284 336.11 35.9752 336.599 36.436 cv
337.074 36.8968 337.737 37.1272 338.601 37.1272 cv
339.09 37.1272 339.58 37.0696 340.041 36.9544 cv
340.502 36.8392 340.977 36.652 341.438 36.3928 cv
341.438 37.6168 li
340.977 37.8184 340.502 37.9768 340.012 38.0632 cv
339.522 38.1496 339.018 38.2072 338.529 38.2072 cv
337.262 38.2072 336.268 37.8472 335.534 37.1272 cv
334.799 36.4072 334.439 35.4136 334.439 34.1608 cv
334.439 32.8792 334.785 31.8568 335.476 31.0936 cv
336.167 30.3448 337.118 29.956 338.298 29.956 cv
339.364 29.956 340.199 30.3016 340.818 30.9784 cv
341.423 31.6696 341.74 32.5912 341.74 33.7576 cv
340.444 33.3832 mo
340.43 32.6776 340.228 32.116 339.854 31.684 cv
339.465 31.2664 338.946 31.0504 338.313 31.0504 cv
337.593 31.0504 337.017 31.2664 336.585 31.6696 cv
336.153 32.0728 335.894 32.6488 335.836 33.3832 cv
340.444 33.3832 li
f
349.53 30.4456 mo
349.53 31.6552 li
349.156 31.4536 348.796 31.3096 348.422 31.2088 cv
348.047 31.108 347.687 31.0504 347.313 31.0504 cv
346.478 31.0504 345.815 31.324 345.354 31.8568 cv
344.894 32.3896 344.663 33.1384 344.663 34.0888 cv
344.663 35.0536 344.894 35.8024 345.354 36.3352 cv
345.815 36.868 346.478 37.1272 347.313 37.1272 cv
347.687 37.1272 348.047 37.084 348.422 36.9832 cv
348.796 36.8824 349.156 36.724 349.53 36.5224 cv
349.53 37.7176 li
349.156 37.8904 348.782 38.02 348.407 38.092 cv
348.018 38.164 347.601 38.2072 347.169 38.2072 cv
345.988 38.2072 345.038 37.8472 344.346 37.0984 cv
343.641 36.364 343.295 35.356 343.295 34.0888 cv
343.295 32.8072 343.641 31.7992 344.346 31.0648 cv
345.052 30.3304 346.017 29.956 347.255 29.956 cv
347.658 29.956 348.047 29.9992 348.422 30.0856 cv
348.796 30.172 349.17 30.2872 349.53 30.4456 cv
f
353.059 27.9112 mo
353.059 30.1432 li
355.723 30.1432 li
355.723 31.1512 li
353.059 31.1512 li
353.059 35.428 li
353.059 36.076 353.145 36.4936 353.318 36.6664 cv
353.491 36.8536 353.85 36.94 354.398 36.94 cv
355.723 36.94 li
355.723 38.02 li
354.398 38.02 li
353.39 38.02 352.699 37.8328 352.324 37.4584 cv
351.95 37.084 351.763 36.4072 351.763 35.428 cv
351.763 31.1512 li
350.812 31.1512 li
350.812 30.1432 li
351.763 30.1432 li
351.763 27.9112 li
353.059 27.9112 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
